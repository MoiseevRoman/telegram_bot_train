import asyncio
import re

import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from config import BOT_TOKEN, OPEN_WEATHER_API_KEY
from utils import (calculate_goals, get_exercise_info, get_food_info,
                   translate_from_rus_to_eng)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

users = {}


class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    temp = State()
    water_goal = State()
    calories_goal = State()


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile."
    )


@dp.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileSetup.weight)
    users[message.from_user.id] = {}


@dp.message(ProfileSetup.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    users[message.from_user.id]["weight"] = int(message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(ProfileSetup.height)


@dp.message(ProfileSetup.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    users[message.from_user.id]["height"] = int(message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileSetup.age)


@dp.message(ProfileSetup.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    users[message.from_user.id]["age"] = int(message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(ProfileSetup.city)


@dp.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    users[message.from_user.id]["city"] = message.text
    response = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={await translate_from_rus_to_eng(users[message.from_user.id]['city'])}&appid={OPEN_WEATHER_API_KEY}"
    )
    data = response.json()
    if response.status_code == 401:
        return None, data
    users[message.from_user.id]["temp"] = round(data["main"]["temp"] - 273.15, 1)

    calculate_goals(users[message.from_user.id])
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"- –í–µ—Å: {users[message.from_user.id]['weight']} –∫–≥\n"
        f"- –†–æ—Å—Ç: {users[message.from_user.id]['height']} —Å–º\n"
        f"- –í–æ–∑—Ä–∞—Å—Ç: {users[message.from_user.id]['age']}\n"
        f"- –ì–æ—Ä–æ–¥: {users[message.from_user.id]['city']}\n"
        f"- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {users[message.from_user.id]['temp']}\n"
        f"- –¶–µ–ª—å –ø–æ –≤–æ–¥–µ: {users[message.from_user.id]['water_goal']}\n"
        f"- –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {users[message.from_user.id]['calories_goal']}\n"
    )
    await state.clear()


@dp.message(Command("log_water"))
async def log_water(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    amount = int(command.args.split(" ")[0])
    user_id = message.from_user.id
    users[user_id]["logged_water"] = users[user_id].get("logged_water", 0) + amount
    remaining = users[user_id]["water_goal"] - users[user_id]["logged_water"]
    await message.answer(
        f"–í—ã –≤—ã–ø–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã.\n" f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å {remaining} –º–ª –≤–æ–¥—ã.\n"
    )


@dp.message(Command("log_food"))
async def log_food(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    query = command.args
    user_id = message.from_user.id
    food_info = await get_food_info(query)

    users[user_id]["logged_calories"] = (
        users[user_id].get("logged_calories", 0) + food_info
    )

    await message.answer(f"–í—ã —Å—ä–µ–ª–∏ {query}, —ç—Ç–æ {food_info} –∫–∞–ª–æ—Ä–∏–π.\n")


@dp.message(Command("log_workout"))
async def log_workout(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    query = command.args
    user_id = message.from_user.id
    exercise_info = await get_exercise_info(query, users[user_id])

    minutes = int(re.search(r"\d+", query).group())
    users[user_id]["activity"] = minutes
    users[user_id]["water_added_goal"] = users[user_id]["water_goal"] + 200 * (
        users[user_id]["activity"] // 30
    )
    users[user_id]["calories_added_goal"] = users[user_id]["calories_goal"] + 200 * (
        users[user_id]["activity"] // 30
    )
    users[user_id]["burned_calories"] = exercise_info
    users[user_id]["logged_calories"] = (
        users[user_id].get("logged_calories", 0) - exercise_info
    )

    await message.answer(f"–í—ã —Å–¥–µ–ª–∞–ª–∏ {query} –∏ —Å–æ–∂–≥–ª–∏ {exercise_info} –∫–∞–ª–æ—Ä–∏–π")


@dp.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile."
        )
        return

    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {users[user_id].get('logged_water', 0)} –∏–∑ {users[user_id].get('water_added_goal', 0)}\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {users[user_id]['water_added_goal'] - users[user_id].get('logged_water', 0)}\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {users[user_id].get('logged_calories', 0)} –∏–∑ {users[user_id]['calories_added_goal']}\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {users[user_id].get('burned_calories', 0)}\n"
        f"- –ë–∞–ª–∞–Ω—Å: {users[user_id].get('logged_calories', 0) - users[user_id].get('burned_calories', 0)}"
    )


async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
